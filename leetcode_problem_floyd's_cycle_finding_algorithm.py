# -*- coding: utf-8 -*-
"""Leetcode-Problem:Floyd's Cycle Finding Algorithm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1krV_xKgHd-hP4--c6-tAwd7VGjWzmXsZ

Given head, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.
"""

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: ListNode) -> bool:
        if head is None:
            return False
        hare = head
        tortoise = head
        while (tortoise and hare and hare.next):
            tortoise = tortoise.next
            hare = hare.next.next
            if tortoise == hare:
                return True
        return False